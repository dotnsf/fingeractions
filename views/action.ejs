<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8"/>
<title>action.ejs</title>
<script type="text/javascript" src="//code.jquery.com/jquery-2.2.4.min.js"></script>
<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet"/>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<meta name="apple-mobile-web-app-capable" content="yes"/>

<style type="text/css">
html, body{
  text-align: center;
  background-color: #fafafa;
  font-size: 20px;
  color: #333;
}
#mycanvas{
  border: 1px solid #333;
}
#_mycanvas{
  border: 1px solid #333;
}

.ball{
  position: relative;
  width: 100px;
  height: 100px;
}
</style>
</head>
<body>
<div id="canvas_div">
  <div id="cdiv"></div>

  <br/>
  <input type="button" class="btn btn-xs btn-warning" value="reset" onClick="resetCanvas();"/>
  <input type="button" class="btn btn-xs btn-primary" value="action" onClick="action();"/>

  <br/><img src="/ball.png" id="ball" class="ball"/>
</div>

<script>
var base_url = location.origin + '/';
console.log( base_url );

//. 参考: https://gist.github.com/Cartman0/436459b9b85cfdd1ca9c
$(function(){
  init();
});

function init(){
  $('#cdiv').html( '<canvas width="80%" height="50%" id="mycanvas"></canvas>'
    + '<canvas width="80%" height="50%" id="_mycanvas" style="display:none;"></canvas>'
  );

  var canvas = document.getElementById( 'mycanvas' );
  var _canvas = document.getElementById( '_mycanvas' );
  if( !canvas || !canvas.getContext || !_canvas || !_canvas.getContext ){
    return false;
  }
  var ctx = canvas.getContext( '2d' );
  var _ctx = _canvas.getContext( '2d' );

  //. マウスの座標を取得
  var mouse = {
    startX: 0,
    startY: 0,
    x: 0,
    y: 0,
    color: "black",
    isDrawing: false
  };
  var borderWidth = 1;
  canvas.addEventListener( "mousemove", function( e ){
    //. マウスが動いたら座標値を取得
    var rect = e.target.getBoundingClientRect();
    mouse.x = e.clientX - rect.left - borderWidth;
    mouse.y = e.clientY - rect.top - borderWidth;

    //. isDrawがtrueのとき描画
    if( mouse.isDrawing ){
      var color = 'black';

      _ctx.beginPath();
      _ctx.lineWidth = 2;
      _ctx.lineCap = 'round';
      _ctx.moveTo( mouse.startX, mouse.startY );
      _ctx.lineTo( mouse.x, mouse.y );
      _ctx.stroke();
      mouse.startX = mouse.x;
      mouse.startY = mouse.y;
    }
  });
  //. マウスを押したら、描画OK(myDrawをtrue)
  canvas.addEventListener( "mousedown", function( e ){
    mouse.isDrawing = true;
    mouse.startX = mouse.x;
    mouse.startY = mouse.y;
  });
  //. マウスを上げたら、描画禁止(myDrawをfalse)
  canvas.addEventListener( "mouseup", function( e ){
    mouse.isDrawing = false;
    action();
  });
  canvas.addEventListener( 'mouseleave', function( e ){
    mouse.isDrawing = false;
    action();
  });

  canvas.addEventListener( "touchmove", function( e ){
    //. タッチが動いたら座標値を取得
    var t = e.changedTouches[0];
    var rect = e.target.getBoundingClientRect();
    //mouse.x = e.pageX - rect.left - borderWidth;
    //mouse.y = e.pageY - rect.top - borderWidth;
    mouse.x = ( isAndroid() ? t.pageX : e.pageX ) - rect.left - borderWidth;
    mouse.y = ( isAndroid() ? t.pageY : e.pageY ) - rect.top - borderWidth;

    //. isDrawがtrueのとき描画
    if( mouse.isDrawing ){
      var color = 'black';

      _ctx.beginPath();
      _ctx.lineWidth = 2;
      _ctx.lineCap = 'round';
      _ctx.moveTo( mouse.startX, mouse.startY );
      _ctx.lineTo( mouse.x, mouse.y );
      _ctx.stroke();
      mouse.startX = mouse.x;
      mouse.startY = mouse.y;
    }
  });
  //. タッチしたら、描画OK(myDrawをtrue)
  canvas.addEventListener( "touchstart", function( e ){
    var t = e.changedTouches[0];
    var rect = t.target.getBoundingClientRect();
    mouse.isDrawing = true;
    mouse.startX = t.pageX - rect.left - borderWidth;
    mouse.startY = t.pageY - rect.top - borderWidth;
  });
  //. タッチを上げたら、描画禁止(myDrawをfalse)
  canvas.addEventListener( "touchend", function( e ){
    mouse.isDrawing = false;
    action();
  });
  canvas.addEventListener( 'touchcancel', function( e ){
    mouse.isDrawing = false;
    action();
  });

  //. リサイズ時に Canvas サイズを変更する
  $(window).on( 'load resize', function(){
    resized();
  });

  //. スクロール禁止
  /*
  $(window).on('touchmove.noScroll', function( e ){
    e.preventDefault();
  });
  */
  var movefun = function( event ){
    event.preventDefault();
  }
  window.addEventListener( 'touchmove', movefun, { passive: false } );
}

function resized(){
  var browserWidth = window.innerWidth;
  var browserHeight = window.innerHeight;
  var canvas = document.getElementById( 'mycanvas' );
  if( canvas && canvas.getContext ){
    canvas.width = browserWidth * 0.8;
    canvas.height = browserHeight * 0.6;
  }
  var _canvas = document.getElementById( '_mycanvas' );
  if( _canvas && _canvas.getContext ){
    _canvas.width = browserWidth * 0.8;
    _canvas.height = browserHeight * 0.6;
  }
}

function resetCanvas(){
  init();
  resized();
}

function isAndroid(){
  return ( navigator.userAgent.indexOf( 'Android' ) > 0 );
}

function action(){
  var _canvas = document.getElementById( '_mycanvas' );
  if( !_canvas || !_canvas.getContext ){
    return false;
  }
  var _ctx = _canvas.getContext( '2d' );

  //. 画像データ
  var png = _canvas.toDataURL( 'image/png' );
  png = png.replace( /^.*,/, '' );

  //. バイナリ変換
  var bin = atob( png );
  var buffer = new Uint8Array( bin.length );
  for( var i = 0; i < bin.length; i ++ ){
    buffer[i] = bin.charCodeAt( i );
  }
  var blob = new Blob( [buffer.buffer], {
    type: 'image/png'
  });

  //. フォームにして送信
  console.log( 'Sending data... : ' + blob.size );
  var formData = new FormData();
  formData.append( 'image', blob );    //. <form enctype='multipart/formdata'><input name='image' type='file'/> ...
  $.ajax({
    type: 'POST',
    url: '/search',
    data: formData,
    contentType: false,
    processData: false,
    success: function( result, dataType ){
      console.log( result );

      var maxkey = null;
      var maxconfidence = 0.0;
      for( key in result.confidences ){
        if( result.confidences[key] > maxconfidence ){
          maxkey = key;
          maxconfidence = result.confidences[key];
        }
      }
      result.confidences['maxkey'] = maxkey;
      var s = JSON.stringify( result.confidences, null, 2 );
      console.log( s );

      switch( maxkey ){
      case 'curve':
        $('#ball').animate(
      /*
          { 'top': '-100px', 'left': '100px' },
          { 'duration': 400, 'easing': 'linear' }
        ).animate(
          { 'top': '-200px', 'left': '0px' },
          { 'duration': 400, 'complete': function(){
            $('#ball').css( { 'top': '0px', 'left': '0px' } );
          } }
        */
          { count: 1 },
          {
            duration: 800,
            step: function( current ){
              var point = getXY( current );
              $('#ball').css( { left: point.x, top: point.y } );
            },
            complete: function(){
              $('#ball').css( { top: '0px', left: '0px' } );
            }
          }
        );
        break;
      case 'straight':
        $('#ball').animate(
          { 'top': '-200px' },
          { duration: 800, complete: function(){
            $('#ball').css( { top: '0px', left: '0px' } );
          } }
        );
        break;
      case 'right':
        $('#ball').animate(
          { top: '-200px', left: '100px' },
          { duration: 800, complete: function(){
            $('#ball').css( { top: '0px', left: '0px' } );
          } }
        );
        break;
      case 'left':
        $('#ball').animate(
          { top: '-200px', left: '-100px' },
          { duration: 800, complete: function(){
            $('#ball').css( { top: '0px', left: '0px' } );
          } }
        );
        break;
      }

      resetCanvas();
    },
    error: function( jqXHR, textStatus, errorThrown ){
      console.log( textStatus + ': ' + errorThrown );
    }
  });
}

function redrawCanvas(){
  resetCanvas();
}

var ox = 100;
var oy = 200;
function getXY( t ){
  /*
  var tp = 1 - t;
  var y = 200 * tp;
  var x = 100 + Math.sqrt( 100 * 100 - ( y - 100 ) * ( y - 100 ) );

  var px = x - ox;
  var py = y - oy;
  ox = x;
  oy = y;

  return { x: px, y: py };
  */
  var tp = 1 - t;
  var y = -200 * t;
  var x = Math.sqrt( 100 * 100 - ( y + 100 ) * ( y + 100 ) );

  return { x: x, y: y };
}
</script>
</body>
</html>
